import React, { useEffect, useCallback } from 'react'
import { $getRoot, $createRangeSelection, $setSelection } from 'lexical'
import { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'
import { $createTextNode, $getSelection, $isRangeSelection } from 'lexical'
import type { Suggestion } from '../../store'

// Custom decorator node for highlighting suggestions
import { 
  DecoratorNode,
  $applyNodeReplacement,
} from 'lexical'
import type {
  NodeKey,
  LexicalNode,
  SerializedLexicalNode,
  Spread
} from 'lexical'

interface SuggestionHighlightProps {
  suggestions: Suggestion[]
  onSuggestionClick?: (suggestion: Suggestion) => void
}

export type SerializedSuggestionHighlightNode = Spread<
  {
    suggestionId: string
    text: string
    suggestionType: string
  },
  SerializedLexicalNode
>

export class SuggestionHighlightNode extends DecoratorNode<React.JSX.Element> {
  __suggestionId: string
  __text: string
  __suggestionType: string

  static getType(): string {
    return 'suggestion-highlight'
  }

  static clone(node: SuggestionHighlightNode): SuggestionHighlightNode {
    return new SuggestionHighlightNode(node.__suggestionId, node.__text, node.__suggestionType, node.__key)
  }

  constructor(suggestionId: string, text: string, suggestionType: string, key?: NodeKey) {
    super(key)
    this.__suggestionId = suggestionId
    this.__text = text
    this.__suggestionType = suggestionType
  }

  createDOM(): HTMLElement {
    const element = document.createElement('span')
    element.style.cssText = `
      position: relative;
      background-color: ${this.getHighlightColor()};
      border-bottom: 2px solid ${this.getBorderColor()};
      cursor: pointer;
      border-radius: 2px;
      padding: 1px 2px;
    `
    element.className = `suggestion-highlight suggestion-${this.__suggestionType}`
    element.dataset.suggestionId = this.__suggestionId
    return element
  }

  updateDOM(): false {
    return false
  }

  getHighlightColor(): string {
    switch (this.__suggestionType) {
      case 'spelling': return 'rgba(239, 68, 68, 0.2)' // red
      case 'grammar': return 'rgba(59, 130, 246, 0.2)' // blue  
      case 'style': return 'rgba(16, 185, 129, 0.2)' // green
      case 'vocabulary': return 'rgba(139, 92, 246, 0.2)' // purple
      default: return 'rgba(156, 163, 175, 0.2)' // gray
    }
  }

  getBorderColor(): string {
    switch (this.__suggestionType) {
      case 'spelling': return '#ef4444'
      case 'grammar': return '#3b82f6'
      case 'style': return '#10b981'
      case 'vocabulary': return '#8b5cf6'
      default: return '#9ca3af'
    }
  }

  decorate(): React.JSX.Element {
    return (
      <span 
        style={{
          position: 'relative',
          backgroundColor: this.getHighlightColor(),
          borderBottom: `2px solid ${this.getBorderColor()}`,
          cursor: 'pointer',
          borderRadius: '2px',
          padding: '1px 2px'
        }}
        className={`suggestion-highlight suggestion-${this.__suggestionType}`}
        data-suggestion-id={this.__suggestionId}
      >
        {this.__text}
      </span>
    )
  }

  static importJSON(serializedNode: SerializedSuggestionHighlightNode): SuggestionHighlightNode {
    const { suggestionId, text, suggestionType } = serializedNode
    return $createSuggestionHighlightNode(suggestionId, text, suggestionType)
  }

  exportJSON(): SerializedSuggestionHighlightNode {
    return {
      suggestionId: this.__suggestionId,
      text: this.__text,
      suggestionType: this.__suggestionType,
      type: 'suggestion-highlight',
      version: 1
    }
  }

  getTextContent(): string {
    return this.__text
  }

  getSuggestionId(): string {
    return this.__suggestionId
  }
}

export function $createSuggestionHighlightNode(
  suggestionId: string,
  text: string,
  suggestionType: string
): SuggestionHighlightNode {
  return $applyNodeReplacement(new SuggestionHighlightNode(suggestionId, text, suggestionType))
}

export function $isSuggestionHighlightNode(
  node: LexicalNode | null | undefined
): node is SuggestionHighlightNode {
  return node instanceof SuggestionHighlightNode
}

// Main plugin component
export default function SuggestionHighlightPlugin({ 
  suggestions, 
  onSuggestionClick 
}: SuggestionHighlightProps) {
  const [editor] = useLexicalComposerContext()

  const applyHighlights = useCallback(() => {
    editor.update(() => {
      const root = $getRoot()
      const textContent = root.getTextContent()
      
      // Get pending suggestions
      const pendingSuggestions = suggestions.filter(s => s.status === 'pending')
      
      if (pendingSuggestions.length === 0) {
        // Remove existing highlights
        removeExistingHighlights(root)
        return
      }

      console.log('Applying highlights for suggestions:', pendingSuggestions.length)
      
      // Remove existing highlights first
      removeExistingHighlights(root)
      
      // Apply new highlights
      pendingSuggestions.forEach(suggestion => {
        const { original, position_start, position_end } = suggestion
        
        // Try position-based highlighting first
        if (position_start >= 0 && position_end > position_start && position_end <= textContent.length) {
          const actualText = textContent.substring(position_start, position_end)
          if (actualText === original || actualText.trim() === original.trim()) {
            highlightTextAtPosition(root, position_start, position_end, suggestion)
            return
          }
        }
        
        // Fallback to text search
        const textIndex = textContent.indexOf(original)
        if (textIndex !== -1) {
          highlightTextAtPosition(root, textIndex, textIndex + original.length, suggestion)
        }
      })
    })
  }, [editor, suggestions])

  // Remove existing highlight nodes
  const removeExistingHighlights = useCallback((root: any) => {
    const highlightNodes: SuggestionHighlightNode[] = []
    
    // Collect all highlight nodes
    root.getChildren().forEach((child: any) => {
      if ($isSuggestionHighlightNode(child)) {
        highlightNodes.push(child)
      } else {
        // Recursively check children
        const childHighlights = findHighlightNodes(child)
        highlightNodes.push(...childHighlights)
      }
    })
    
    // Replace highlight nodes with plain text
    highlightNodes.forEach(highlightNode => {
      const textNode = $createTextNode(highlightNode.getTextContent())
      highlightNode.replace(textNode)
    })
  }, [])

  const findHighlightNodes = (node: any): SuggestionHighlightNode[] => {
    const highlights: SuggestionHighlightNode[] = []
    
    if ($isSuggestionHighlightNode(node)) {
      highlights.push(node)
    }
    
    if (node.getChildren) {
      node.getChildren().forEach((child: any) => {
        highlights.push(...findHighlightNodes(child))
      })
    }
    
    return highlights
  }

  const highlightTextAtPosition = useCallback((root: any, startPos: number, endPos: number, suggestion: Suggestion) => {
    // This is a simplified version - in practice, you'd need to walk the node tree
    // and handle text nodes that span multiple paragraphs, formatting, etc.
    // For now, let's assume simple paragraph structure
    
    let currentPos = 0
    const children = root.getChildren()
    
    for (const child of children) {
      const childText = child.getTextContent()
      const childStart = currentPos
      const childEnd = currentPos + childText.length
      
      // Check if our target range overlaps with this child
      if (startPos < childEnd && endPos > childStart) {
        const relativeStart = Math.max(0, startPos - childStart)
        const relativeEnd = Math.min(childText.length, endPos - childStart)
        
        // Split the text node and insert highlight
        splitAndHighlight(child, relativeStart, relativeEnd, suggestion)
        break
      }
      
      currentPos = childEnd
    }
  }, [])

  const splitAndHighlight = useCallback((textNode: any, start: number, end: number, suggestion: Suggestion) => {
    const fullText = textNode.getTextContent()
    const beforeText = fullText.substring(0, start)
    const highlightText = fullText.substring(start, end)
    const afterText = fullText.substring(end)
    
    const parent = textNode.getParent()
    if (!parent) return
    
    // Remove original text node
    textNode.remove()
    
    // Add text parts
    if (beforeText) {
      parent.append($createTextNode(beforeText))
    }
    
    // Add highlighted part
    const highlightNode = $createSuggestionHighlightNode(
      suggestion.id,
      highlightText,
      suggestion.type
    )
    parent.append(highlightNode)
    
    if (afterText) {
      parent.append($createTextNode(afterText))
    }
  }, [])

  // Handle clicks on highlights
  useEffect(() => {
    const editorElement = editor.getRootElement()
    if (!editorElement) return

    const handleClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement
      const suggestionId = target.dataset.suggestionId
      
      if (suggestionId && onSuggestionClick) {
        const suggestion = suggestions.find(s => s.id === suggestionId)
        if (suggestion) {
          event.preventDefault()
          onSuggestionClick(suggestion)
        }
      }
    }

    editorElement.addEventListener('click', handleClick)
    return () => editorElement.removeEventListener('click', handleClick)
  }, [editor, suggestions, onSuggestionClick])

  // Apply highlights when suggestions change
  useEffect(() => {
    const timeoutId = setTimeout(applyHighlights, 100)
    return () => clearTimeout(timeoutId)
  }, [applyHighlights])

  return null
} 